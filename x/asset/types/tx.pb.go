// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: realionetwork/asset/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateToken struct {
	Creator            string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Manager            string   `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty"`
	Name               string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol             string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimal            string   `protobuf:"bytes,5,opt,name=decimal,proto3" json:"decimal,omitempty"`
	ExcludedPrivileges []string `protobuf:"bytes,6,rep,name=excluded_privileges,json=excludedPrivileges,proto3" json:"excluded_privileges,omitempty"`
	AddNewPrivilege    bool     `protobuf:"varint,7,opt,name=add_new_privilege,json=addNewPrivilege,proto3" json:"add_new_privilege,omitempty"`
}

func (m *MsgCreateToken) Reset()         { *m = MsgCreateToken{} }
func (m *MsgCreateToken) String() string { return proto.CompactTextString(m) }
func (*MsgCreateToken) ProtoMessage()    {}
func (*MsgCreateToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{0}
}
func (m *MsgCreateToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateToken.Merge(m, src)
}
func (m *MsgCreateToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateToken proto.InternalMessageInfo

func (m *MsgCreateToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateToken) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgCreateToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateToken) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgCreateToken) GetDecimal() string {
	if m != nil {
		return m.Decimal
	}
	return ""
}

func (m *MsgCreateToken) GetExcludedPrivileges() []string {
	if m != nil {
		return m.ExcludedPrivileges
	}
	return nil
}

func (m *MsgCreateToken) GetAddNewPrivilege() bool {
	if m != nil {
		return m.AddNewPrivilege
	}
	return false
}

type MsgCreateTokenResponse struct {
}

func (m *MsgCreateTokenResponse) Reset()         { *m = MsgCreateTokenResponse{} }
func (m *MsgCreateTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTokenResponse) ProtoMessage()    {}
func (*MsgCreateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{1}
}
func (m *MsgCreateTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTokenResponse.Merge(m, src)
}
func (m *MsgCreateTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTokenResponse proto.InternalMessageInfo

type MsgAllocateToken struct {
	Manager        string          `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	TokenId        string          `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Balances       []types.Balance `protobuf:"bytes,3,rep,name=balances,proto3" json:"balances"`
	VestingBalance []*types1.Any   `protobuf:"bytes,4,rep,name=vesting_balance,json=vestingBalance,proto3" json:"vesting_balance,omitempty"`
}

func (m *MsgAllocateToken) Reset()         { *m = MsgAllocateToken{} }
func (m *MsgAllocateToken) String() string { return proto.CompactTextString(m) }
func (*MsgAllocateToken) ProtoMessage()    {}
func (*MsgAllocateToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{2}
}
func (m *MsgAllocateToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocateToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocateToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocateToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocateToken.Merge(m, src)
}
func (m *MsgAllocateToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocateToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocateToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocateToken proto.InternalMessageInfo

func (m *MsgAllocateToken) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgAllocateToken) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgAllocateToken) GetBalances() []types.Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *MsgAllocateToken) GetVestingBalance() []*types1.Any {
	if m != nil {
		return m.VestingBalance
	}
	return nil
}

type MsgAllocateTokenResponse struct {
}

func (m *MsgAllocateTokenResponse) Reset()         { *m = MsgAllocateTokenResponse{} }
func (m *MsgAllocateTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAllocateTokenResponse) ProtoMessage()    {}
func (*MsgAllocateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{3}
}
func (m *MsgAllocateTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocateTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocateTokenResponse.Merge(m, src)
}
func (m *MsgAllocateTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocateTokenResponse proto.InternalMessageInfo

type MsgAssignPrivilege struct {
	Manager    string   `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	TokenId    string   `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	AssignedTo []string `protobuf:"bytes,3,rep,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	Privilege  string   `protobuf:"bytes,4,opt,name=privilege,proto3" json:"privilege,omitempty"`
}

func (m *MsgAssignPrivilege) Reset()         { *m = MsgAssignPrivilege{} }
func (m *MsgAssignPrivilege) String() string { return proto.CompactTextString(m) }
func (*MsgAssignPrivilege) ProtoMessage()    {}
func (*MsgAssignPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{4}
}
func (m *MsgAssignPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignPrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignPrivilege.Merge(m, src)
}
func (m *MsgAssignPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignPrivilege proto.InternalMessageInfo

func (m *MsgAssignPrivilege) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgAssignPrivilege) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgAssignPrivilege) GetAssignedTo() []string {
	if m != nil {
		return m.AssignedTo
	}
	return nil
}

func (m *MsgAssignPrivilege) GetPrivilege() string {
	if m != nil {
		return m.Privilege
	}
	return ""
}

type MsgAssignPrivilegeResponse struct {
}

func (m *MsgAssignPrivilegeResponse) Reset()         { *m = MsgAssignPrivilegeResponse{} }
func (m *MsgAssignPrivilegeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignPrivilegeResponse) ProtoMessage()    {}
func (*MsgAssignPrivilegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{5}
}
func (m *MsgAssignPrivilegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignPrivilegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignPrivilegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignPrivilegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignPrivilegeResponse.Merge(m, src)
}
func (m *MsgAssignPrivilegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignPrivilegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignPrivilegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignPrivilegeResponse proto.InternalMessageInfo

type MsgUnassignPrivilege struct {
	Manager        string   `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	TokenId        string   `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	UnassignedFrom []string `protobuf:"bytes,3,rep,name=unassigned_from,json=unassignedFrom,proto3" json:"unassigned_from,omitempty"`
	Privilege      string   `protobuf:"bytes,4,opt,name=privilege,proto3" json:"privilege,omitempty"`
}

func (m *MsgUnassignPrivilege) Reset()         { *m = MsgUnassignPrivilege{} }
func (m *MsgUnassignPrivilege) String() string { return proto.CompactTextString(m) }
func (*MsgUnassignPrivilege) ProtoMessage()    {}
func (*MsgUnassignPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{6}
}
func (m *MsgUnassignPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnassignPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnassignPrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnassignPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnassignPrivilege.Merge(m, src)
}
func (m *MsgUnassignPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnassignPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnassignPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnassignPrivilege proto.InternalMessageInfo

func (m *MsgUnassignPrivilege) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgUnassignPrivilege) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgUnassignPrivilege) GetUnassignedFrom() []string {
	if m != nil {
		return m.UnassignedFrom
	}
	return nil
}

func (m *MsgUnassignPrivilege) GetPrivilege() string {
	if m != nil {
		return m.Privilege
	}
	return ""
}

type MsgUnassignPrivilegeResponse struct {
}

func (m *MsgUnassignPrivilegeResponse) Reset()         { *m = MsgUnassignPrivilegeResponse{} }
func (m *MsgUnassignPrivilegeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnassignPrivilegeResponse) ProtoMessage()    {}
func (*MsgUnassignPrivilegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{7}
}
func (m *MsgUnassignPrivilegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnassignPrivilegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnassignPrivilegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnassignPrivilegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnassignPrivilegeResponse.Merge(m, src)
}
func (m *MsgUnassignPrivilegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnassignPrivilegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnassignPrivilegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnassignPrivilegeResponse proto.InternalMessageInfo

type MsgDisablePrivilege struct {
	Manager           string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	TokenId           string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	DisabledPrivilege string `protobuf:"bytes,3,opt,name=disabled_privilege,json=disabledPrivilege,proto3" json:"disabled_privilege,omitempty"`
}

func (m *MsgDisablePrivilege) Reset()         { *m = MsgDisablePrivilege{} }
func (m *MsgDisablePrivilege) String() string { return proto.CompactTextString(m) }
func (*MsgDisablePrivilege) ProtoMessage()    {}
func (*MsgDisablePrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{8}
}
func (m *MsgDisablePrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisablePrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisablePrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisablePrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisablePrivilege.Merge(m, src)
}
func (m *MsgDisablePrivilege) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisablePrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisablePrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisablePrivilege proto.InternalMessageInfo

func (m *MsgDisablePrivilege) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgDisablePrivilege) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgDisablePrivilege) GetDisabledPrivilege() string {
	if m != nil {
		return m.DisabledPrivilege
	}
	return ""
}

type MsgDisablePrivilegeResponse struct {
}

func (m *MsgDisablePrivilegeResponse) Reset()         { *m = MsgDisablePrivilegeResponse{} }
func (m *MsgDisablePrivilegeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisablePrivilegeResponse) ProtoMessage()    {}
func (*MsgDisablePrivilegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{9}
}
func (m *MsgDisablePrivilegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisablePrivilegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisablePrivilegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisablePrivilegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisablePrivilegeResponse.Merge(m, src)
}
func (m *MsgDisablePrivilegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisablePrivilegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisablePrivilegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisablePrivilegeResponse proto.InternalMessageInfo

type MsgExecutePrivilege struct {
	Address      string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TokenId      string      `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	PrivilegeMsg *types1.Any `protobuf:"bytes,3,opt,name=privilege_msg,json=privilegeMsg,proto3" json:"privilege_msg,omitempty"`
}

func (m *MsgExecutePrivilege) Reset()         { *m = MsgExecutePrivilege{} }
func (m *MsgExecutePrivilege) String() string { return proto.CompactTextString(m) }
func (*MsgExecutePrivilege) ProtoMessage()    {}
func (*MsgExecutePrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{10}
}
func (m *MsgExecutePrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutePrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutePrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutePrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutePrivilege.Merge(m, src)
}
func (m *MsgExecutePrivilege) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutePrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutePrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutePrivilege proto.InternalMessageInfo

func (m *MsgExecutePrivilege) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgExecutePrivilege) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgExecutePrivilege) GetPrivilegeMsg() *types1.Any {
	if m != nil {
		return m.PrivilegeMsg
	}
	return nil
}

type MsgExecutePrivilegeResponse struct {
}

func (m *MsgExecutePrivilegeResponse) Reset()         { *m = MsgExecutePrivilegeResponse{} }
func (m *MsgExecutePrivilegeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecutePrivilegeResponse) ProtoMessage()    {}
func (*MsgExecutePrivilegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cfda60866e68e13, []int{11}
}
func (m *MsgExecutePrivilegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutePrivilegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutePrivilegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutePrivilegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutePrivilegeResponse.Merge(m, src)
}
func (m *MsgExecutePrivilegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutePrivilegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutePrivilegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutePrivilegeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateToken)(nil), "realionetwork.asset.v1.MsgCreateToken")
	proto.RegisterType((*MsgCreateTokenResponse)(nil), "realionetwork.asset.v1.MsgCreateTokenResponse")
	proto.RegisterType((*MsgAllocateToken)(nil), "realionetwork.asset.v1.MsgAllocateToken")
	proto.RegisterType((*MsgAllocateTokenResponse)(nil), "realionetwork.asset.v1.MsgAllocateTokenResponse")
	proto.RegisterType((*MsgAssignPrivilege)(nil), "realionetwork.asset.v1.MsgAssignPrivilege")
	proto.RegisterType((*MsgAssignPrivilegeResponse)(nil), "realionetwork.asset.v1.MsgAssignPrivilegeResponse")
	proto.RegisterType((*MsgUnassignPrivilege)(nil), "realionetwork.asset.v1.MsgUnassignPrivilege")
	proto.RegisterType((*MsgUnassignPrivilegeResponse)(nil), "realionetwork.asset.v1.MsgUnassignPrivilegeResponse")
	proto.RegisterType((*MsgDisablePrivilege)(nil), "realionetwork.asset.v1.MsgDisablePrivilege")
	proto.RegisterType((*MsgDisablePrivilegeResponse)(nil), "realionetwork.asset.v1.MsgDisablePrivilegeResponse")
	proto.RegisterType((*MsgExecutePrivilege)(nil), "realionetwork.asset.v1.MsgExecutePrivilege")
	proto.RegisterType((*MsgExecutePrivilegeResponse)(nil), "realionetwork.asset.v1.MsgExecutePrivilegeResponse")
}

func init() { proto.RegisterFile("realionetwork/asset/v1/tx.proto", fileDescriptor_1cfda60866e68e13) }

var fileDescriptor_1cfda60866e68e13 = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4b, 0x4f, 0xeb, 0x46,
	0x14, 0xc7, 0x63, 0x12, 0x08, 0x1c, 0x0a, 0x81, 0x21, 0x42, 0xc6, 0x4d, 0x43, 0x9a, 0x45, 0x15,
	0xd1, 0x62, 0x37, 0xa1, 0x9b, 0x2e, 0x5a, 0x29, 0xe9, 0x43, 0xaa, 0xd4, 0x54, 0x95, 0x4b, 0x37,
	0xdd, 0x44, 0x63, 0x7b, 0x18, 0xac, 0xd8, 0x33, 0xa9, 0xc7, 0x79, 0x7d, 0x8b, 0x4a, 0x5d, 0x76,
	0xd1, 0xcf, 0x50, 0xa9, 0xcb, 0xbb, 0xbe, 0x62, 0x89, 0xee, 0xea, 0xae, 0xae, 0x10, 0x7c, 0x91,
	0xab, 0xf8, 0x95, 0x17, 0x38, 0x41, 0xba, 0xec, 0x7c, 0x7c, 0x7e, 0x73, 0xce, 0xf9, 0x1f, 0x9f,
	0x33, 0x09, 0x9c, 0x7a, 0x04, 0x3b, 0x36, 0x67, 0xc4, 0x1f, 0x72, 0xaf, 0xab, 0x61, 0x21, 0x88,
	0xaf, 0x0d, 0xea, 0x9a, 0x3f, 0x52, 0x7b, 0x1e, 0xf7, 0x39, 0x3a, 0x9e, 0x03, 0xd4, 0x00, 0x50,
	0x07, 0x75, 0xa5, 0x48, 0x39, 0xe5, 0x01, 0xa2, 0x4d, 0x9e, 0x42, 0x5a, 0x39, 0x31, 0xb9, 0x70,
	0xb9, 0xe8, 0x84, 0x8e, 0xd0, 0x88, 0x5c, 0x9f, 0x86, 0x96, 0x66, 0x60, 0xd6, 0xd5, 0x06, 0x75,
	0x83, 0xf8, 0xb8, 0xae, 0x51, 0xc2, 0x88, 0xb0, 0x63, 0xe4, 0x84, 0x72, 0x4e, 0x1d, 0xa2, 0x05,
	0x96, 0xd1, 0xbf, 0xd2, 0x30, 0x1b, 0x87, 0xae, 0xea, 0x3f, 0x1b, 0xb0, 0xdf, 0x16, 0xf4, 0x3b,
	0x8f, 0x60, 0x9f, 0x5c, 0xf2, 0x2e, 0x61, 0xa8, 0x01, 0x79, 0x73, 0x62, 0x72, 0x4f, 0x96, 0x2a,
	0x52, 0x6d, 0xa7, 0x25, 0xbf, 0xf9, 0xff, 0xbc, 0x18, 0xe5, 0x6c, 0x5a, 0x96, 0x47, 0x84, 0xf8,
	0xcd, 0xf7, 0x6c, 0x46, 0xf5, 0x18, 0x9c, 0x9c, 0x71, 0x31, 0xc3, 0x94, 0x78, 0xf2, 0xc6, 0xaa,
	0x33, 0x11, 0x88, 0x10, 0xe4, 0x18, 0x76, 0x89, 0x9c, 0x9d, 0x1c, 0xd0, 0x83, 0x67, 0x74, 0x0c,
	0x5b, 0x62, 0xec, 0x1a, 0xdc, 0x91, 0x73, 0xc1, 0xdb, 0xc8, 0x42, 0x32, 0xe4, 0x2d, 0x62, 0xda,
	0x2e, 0x76, 0xe4, 0xcd, 0xc0, 0x11, 0x9b, 0x48, 0x83, 0x23, 0x32, 0x32, 0x9d, 0xbe, 0x45, 0xac,
	0x4e, 0xcf, 0xb3, 0x07, 0xb6, 0x43, 0x28, 0x11, 0xf2, 0x56, 0x25, 0x5b, 0xdb, 0xd1, 0x51, 0xec,
	0xfa, 0x35, 0xf1, 0xa0, 0x33, 0x38, 0xc4, 0x96, 0xd5, 0x61, 0x64, 0x38, 0xe5, 0xe5, 0x7c, 0x45,
	0xaa, 0x6d, 0xeb, 0x05, 0x6c, 0x59, 0xbf, 0x90, 0x61, 0x02, 0x57, 0x65, 0x38, 0x9e, 0x6f, 0x8e,
	0x4e, 0x44, 0x8f, 0x33, 0x41, 0xaa, 0x77, 0x12, 0x1c, 0xb4, 0x05, 0x6d, 0x3a, 0x0e, 0x37, 0x67,
	0x3b, 0x17, 0x77, 0x41, 0x5a, 0xb7, 0x0b, 0x27, 0xb0, 0xed, 0x4f, 0x0e, 0x77, 0x6c, 0x2b, 0x6c,
	0x9d, 0x9e, 0x0f, 0xec, 0x9f, 0x2c, 0xf4, 0x2d, 0x6c, 0x1b, 0xd8, 0xc1, 0xcc, 0x24, 0x42, 0xce,
	0x56, 0xb2, 0xb5, 0xdd, 0x46, 0x49, 0x8d, 0x82, 0x4d, 0x3e, 0xb6, 0x1a, 0x7d, 0x6c, 0xb5, 0x15,
	0x42, 0xad, 0xdc, 0xcd, 0xbb, 0xd3, 0x8c, 0x9e, 0x9c, 0x41, 0xdf, 0x40, 0x61, 0x40, 0x84, 0x6f,
	0x33, 0xda, 0x89, 0xde, 0xc9, 0xb9, 0x20, 0x4c, 0x51, 0x0d, 0x07, 0x42, 0x8d, 0x07, 0x42, 0x6d,
	0xb2, 0xb1, 0xbe, 0x1f, 0xc1, 0x51, 0xb8, 0xaa, 0x02, 0xf2, 0xa2, 0xc2, 0x44, 0xfe, 0x2b, 0x09,
	0xd0, 0xc4, 0x29, 0x84, 0x4d, 0x59, 0xd2, 0xaf, 0x0f, 0xdd, 0x80, 0xaf, 0x61, 0x17, 0x07, 0x19,
	0x88, 0xd5, 0xf1, 0x79, 0xd0, 0x83, 0xb4, 0x90, 0x10, 0xc3, 0x97, 0x1c, 0x95, 0x60, 0x67, 0xfa,
	0x75, 0xc3, 0x59, 0x9a, 0xbe, 0xa8, 0x96, 0x40, 0x59, 0xae, 0x3e, 0x11, 0xf7, 0x5a, 0x82, 0x62,
	0x5b, 0xd0, 0xdf, 0x19, 0x7e, 0x59, 0x79, 0x4d, 0x28, 0xf4, 0x59, 0x22, 0xf0, 0xca, 0xe3, 0xee,
	0x4a, 0x89, 0xfb, 0xd3, 0x03, 0x3f, 0x7a, 0xdc, 0x5d, 0x21, 0xb3, 0x0c, 0xa5, 0xc7, 0x74, 0x24,
	0x42, 0xff, 0x96, 0xe0, 0xa8, 0x2d, 0xe8, 0xf7, 0xb6, 0xc0, 0x86, 0x43, 0x5e, 0x4c, 0xe7, 0x39,
	0x20, 0x2b, 0x4c, 0x31, 0xb3, 0xa2, 0xd1, 0xda, 0x1f, 0xc6, 0x9e, 0xe9, 0xd2, 0x7d, 0x02, 0x1f,
	0x3f, 0x52, 0x54, 0x52, 0xf4, 0xbf, 0x61, 0xd1, 0x3f, 0x8c, 0x88, 0xd9, 0xf7, 0xe7, 0x8b, 0xc6,
	0x61, 0x69, 0xab, 0x8b, 0x8e, 0xc0, 0xf4, 0xd9, 0xdb, 0x4b, 0x6a, 0xed, 0xb8, 0x82, 0x06, 0xf5,
	0x3e, 0xb5, 0x3a, 0x1f, 0x25, 0x68, 0x5b, 0xd0, 0x48, 0xc0, 0x62, 0x81, 0xb1, 0x80, 0xc6, 0x7f,
	0x9b, 0x90, 0x6d, 0x0b, 0x8a, 0x08, 0xec, 0xce, 0x5e, 0xbb, 0x9f, 0xa9, 0x8f, 0xff, 0x22, 0xa8,
	0xf3, 0x37, 0x90, 0xa2, 0xae, 0xc7, 0xc5, 0xe9, 0x50, 0x17, 0xf6, 0xe6, 0x6f, 0xa9, 0x5a, 0x4a,
	0x80, 0x39, 0x52, 0xf9, 0x72, 0x5d, 0x32, 0x49, 0xf6, 0x27, 0x14, 0x16, 0xef, 0x84, 0xb3, 0xb4,
	0x20, 0xf3, 0xac, 0xd2, 0x58, 0x9f, 0x4d, 0x52, 0x0e, 0xe1, 0x70, 0x79, 0x53, 0xbf, 0x48, 0x09,
	0xb4, 0x44, 0x2b, 0x5f, 0x3d, 0x87, 0x4e, 0x12, 0xfb, 0x70, 0xb0, 0xb4, 0x39, 0x9f, 0xa7, 0x44,
	0x5a, 0x84, 0x95, 0x8b, 0x67, 0xc0, 0xb3, 0x59, 0x97, 0x46, 0x3f, 0x2d, 0xeb, 0x22, 0x9c, 0x9a,
	0xf5, 0xa9, 0x99, 0x6d, 0xfd, 0x7c, 0x73, 0x5f, 0x96, 0x6e, 0xef, 0xcb, 0xd2, 0xdd, 0x7d, 0x59,
	0xfa, 0xeb, 0xa1, 0x9c, 0xb9, 0x7d, 0x28, 0x67, 0xde, 0x3e, 0x94, 0x33, 0x7f, 0x34, 0xa8, 0xed,
	0x5f, 0xf7, 0x0d, 0xd5, 0xe4, 0xae, 0x16, 0x06, 0xf6, 0x89, 0x79, 0x1d, 0x3d, 0x9e, 0xc7, 0xff,
	0x7f, 0x46, 0xd1, 0x3f, 0x20, 0x7f, 0xdc, 0x23, 0xc2, 0xd8, 0x0a, 0x96, 0xe7, 0xe2, 0x7d, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xee, 0x81, 0x15, 0xb5, 0x25, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateToken(ctx context.Context, in *MsgCreateToken, opts ...grpc.CallOption) (*MsgCreateTokenResponse, error)
	AllocateToken(ctx context.Context, in *MsgAllocateToken, opts ...grpc.CallOption) (*MsgAllocateTokenResponse, error)
	AssignPrivilege(ctx context.Context, in *MsgAssignPrivilege, opts ...grpc.CallOption) (*MsgAssignPrivilegeResponse, error)
	UnassignPrivilege(ctx context.Context, in *MsgUnassignPrivilege, opts ...grpc.CallOption) (*MsgUnassignPrivilegeResponse, error)
	DisablePrivilege(ctx context.Context, in *MsgDisablePrivilege, opts ...grpc.CallOption) (*MsgDisablePrivilegeResponse, error)
	ExecutePrivilege(ctx context.Context, in *MsgExecutePrivilege, opts ...grpc.CallOption) (*MsgExecutePrivilegeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateToken(ctx context.Context, in *MsgCreateToken, opts ...grpc.CallOption) (*MsgCreateTokenResponse, error) {
	out := new(MsgCreateTokenResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocateToken(ctx context.Context, in *MsgAllocateToken, opts ...grpc.CallOption) (*MsgAllocateTokenResponse, error) {
	out := new(MsgAllocateTokenResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/AllocateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignPrivilege(ctx context.Context, in *MsgAssignPrivilege, opts ...grpc.CallOption) (*MsgAssignPrivilegeResponse, error) {
	out := new(MsgAssignPrivilegeResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/AssignPrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnassignPrivilege(ctx context.Context, in *MsgUnassignPrivilege, opts ...grpc.CallOption) (*MsgUnassignPrivilegeResponse, error) {
	out := new(MsgUnassignPrivilegeResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/UnassignPrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisablePrivilege(ctx context.Context, in *MsgDisablePrivilege, opts ...grpc.CallOption) (*MsgDisablePrivilegeResponse, error) {
	out := new(MsgDisablePrivilegeResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/DisablePrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecutePrivilege(ctx context.Context, in *MsgExecutePrivilege, opts ...grpc.CallOption) (*MsgExecutePrivilegeResponse, error) {
	out := new(MsgExecutePrivilegeResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.asset.v1.Msg/ExecutePrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateToken(context.Context, *MsgCreateToken) (*MsgCreateTokenResponse, error)
	AllocateToken(context.Context, *MsgAllocateToken) (*MsgAllocateTokenResponse, error)
	AssignPrivilege(context.Context, *MsgAssignPrivilege) (*MsgAssignPrivilegeResponse, error)
	UnassignPrivilege(context.Context, *MsgUnassignPrivilege) (*MsgUnassignPrivilegeResponse, error)
	DisablePrivilege(context.Context, *MsgDisablePrivilege) (*MsgDisablePrivilegeResponse, error)
	ExecutePrivilege(context.Context, *MsgExecutePrivilege) (*MsgExecutePrivilegeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateToken(ctx context.Context, req *MsgCreateToken) (*MsgCreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedMsgServer) AllocateToken(ctx context.Context, req *MsgAllocateToken) (*MsgAllocateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateToken not implemented")
}
func (*UnimplementedMsgServer) AssignPrivilege(ctx context.Context, req *MsgAssignPrivilege) (*MsgAssignPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPrivilege not implemented")
}
func (*UnimplementedMsgServer) UnassignPrivilege(ctx context.Context, req *MsgUnassignPrivilege) (*MsgUnassignPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignPrivilege not implemented")
}
func (*UnimplementedMsgServer) DisablePrivilege(ctx context.Context, req *MsgDisablePrivilege) (*MsgDisablePrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePrivilege not implemented")
}
func (*UnimplementedMsgServer) ExecutePrivilege(ctx context.Context, req *MsgExecutePrivilege) (*MsgExecutePrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePrivilege not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateToken(ctx, req.(*MsgCreateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/AllocateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocateToken(ctx, req.(*MsgAllocateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignPrivilege)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/AssignPrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignPrivilege(ctx, req.(*MsgAssignPrivilege))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnassignPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnassignPrivilege)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnassignPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/UnassignPrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnassignPrivilege(ctx, req.(*MsgUnassignPrivilege))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisablePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisablePrivilege)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisablePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/DisablePrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisablePrivilege(ctx, req.(*MsgDisablePrivilege))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecutePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecutePrivilege)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecutePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.asset.v1.Msg/ExecutePrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecutePrivilege(ctx, req.(*MsgExecutePrivilege))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "realionetwork.asset.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _Msg_CreateToken_Handler,
		},
		{
			MethodName: "AllocateToken",
			Handler:    _Msg_AllocateToken_Handler,
		},
		{
			MethodName: "AssignPrivilege",
			Handler:    _Msg_AssignPrivilege_Handler,
		},
		{
			MethodName: "UnassignPrivilege",
			Handler:    _Msg_UnassignPrivilege_Handler,
		},
		{
			MethodName: "DisablePrivilege",
			Handler:    _Msg_DisablePrivilege_Handler,
		},
		{
			MethodName: "ExecutePrivilege",
			Handler:    _Msg_ExecutePrivilege_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realionetwork/asset/v1/tx.proto",
}

func (m *MsgCreateToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddNewPrivilege {
		i--
		if m.AddNewPrivilege {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExcludedPrivileges) > 0 {
		for iNdEx := len(m.ExcludedPrivileges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludedPrivileges[iNdEx])
			copy(dAtA[i:], m.ExcludedPrivileges[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ExcludedPrivileges[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Decimal) > 0 {
		i -= len(m.Decimal)
		copy(dAtA[i:], m.Decimal)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Decimal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAllocateToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocateToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocateToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingBalance) > 0 {
		for iNdEx := len(m.VestingBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAllocateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocateTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAssignPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privilege) > 0 {
		i -= len(m.Privilege)
		copy(dAtA[i:], m.Privilege)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privilege)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssignedTo) > 0 {
		for iNdEx := len(m.AssignedTo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssignedTo[iNdEx])
			copy(dAtA[i:], m.AssignedTo[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AssignedTo[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignPrivilegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignPrivilegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignPrivilegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnassignPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnassignPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnassignPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privilege) > 0 {
		i -= len(m.Privilege)
		copy(dAtA[i:], m.Privilege)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privilege)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnassignedFrom) > 0 {
		for iNdEx := len(m.UnassignedFrom) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnassignedFrom[iNdEx])
			copy(dAtA[i:], m.UnassignedFrom[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.UnassignedFrom[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnassignPrivilegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnassignPrivilegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnassignPrivilegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisablePrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisablePrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisablePrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisabledPrivilege) > 0 {
		i -= len(m.DisabledPrivilege)
		copy(dAtA[i:], m.DisabledPrivilege)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisabledPrivilege)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisablePrivilegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisablePrivilegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisablePrivilegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecutePrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutePrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutePrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivilegeMsg != nil {
		{
			size, err := m.PrivilegeMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecutePrivilegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutePrivilegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutePrivilegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Decimal)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ExcludedPrivileges) > 0 {
		for _, s := range m.ExcludedPrivileges {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.AddNewPrivilege {
		n += 2
	}
	return n
}

func (m *MsgCreateTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAllocateToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.VestingBalance) > 0 {
		for _, e := range m.VestingBalance {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAllocateTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAssignPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AssignedTo) > 0 {
		for _, s := range m.AssignedTo {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Privilege)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignPrivilegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnassignPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.UnassignedFrom) > 0 {
		for _, s := range m.UnassignedFrom {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Privilege)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnassignPrivilegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisablePrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisabledPrivilege)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisablePrivilegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecutePrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PrivilegeMsg != nil {
		l = m.PrivilegeMsg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecutePrivilegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decimal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludedPrivileges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludedPrivileges = append(m.ExcludedPrivileges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewPrivilege", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewPrivilege = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocateToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocateToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocateToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingBalance = append(m.VestingBalance, &types1.Any{})
			if err := m.VestingBalance[len(m.VestingBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedTo = append(m.AssignedTo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privilege", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privilege = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignPrivilegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignPrivilegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignPrivilegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnassignPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnassignPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnassignPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnassignedFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnassignedFrom = append(m.UnassignedFrom, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privilege", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privilege = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnassignPrivilegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnassignPrivilegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnassignPrivilegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisablePrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisablePrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisablePrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPrivilege", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPrivilege = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisablePrivilegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisablePrivilegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisablePrivilegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutePrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutePrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutePrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivilegeMsg == nil {
				m.PrivilegeMsg = &types1.Any{}
			}
			if err := m.PrivilegeMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutePrivilegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutePrivilegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutePrivilegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
