// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: realionetwork/bridge/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBridgeIn struct {
	Authority string     `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Coin      types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	Reciever  string     `protobuf:"bytes,3,opt,name=reciever,proto3" json:"reciever,omitempty"`
}

func (m *MsgBridgeIn) Reset()         { *m = MsgBridgeIn{} }
func (m *MsgBridgeIn) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeIn) ProtoMessage()    {}
func (*MsgBridgeIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{0}
}
func (m *MsgBridgeIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeIn.Merge(m, src)
}
func (m *MsgBridgeIn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeIn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeIn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeIn proto.InternalMessageInfo

func (m *MsgBridgeIn) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgBridgeIn) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *MsgBridgeIn) GetReciever() string {
	if m != nil {
		return m.Reciever
	}
	return ""
}

type MsgBridgeInResponse struct {
}

func (m *MsgBridgeInResponse) Reset()         { *m = MsgBridgeInResponse{} }
func (m *MsgBridgeInResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeInResponse) ProtoMessage()    {}
func (*MsgBridgeInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{1}
}
func (m *MsgBridgeInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeInResponse.Merge(m, src)
}
func (m *MsgBridgeInResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeInResponse proto.InternalMessageInfo

type MsgBridgeOut struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
}

func (m *MsgBridgeOut) Reset()         { *m = MsgBridgeOut{} }
func (m *MsgBridgeOut) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeOut) ProtoMessage()    {}
func (*MsgBridgeOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{2}
}
func (m *MsgBridgeOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeOut.Merge(m, src)
}
func (m *MsgBridgeOut) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeOut) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeOut.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeOut proto.InternalMessageInfo

func (m *MsgBridgeOut) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgBridgeOut) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgBridgeOutResponse struct {
}

func (m *MsgBridgeOutResponse) Reset()         { *m = MsgBridgeOutResponse{} }
func (m *MsgBridgeOutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeOutResponse) ProtoMessage()    {}
func (*MsgBridgeOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{3}
}
func (m *MsgBridgeOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeOutResponse.Merge(m, src)
}
func (m *MsgBridgeOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeOutResponse proto.InternalMessageInfo

// authority should be gov addr
// other coin_authority should coin's authority (DAO addr or contract addr)
type MsgRegisterNewCoins struct {
	Authority     string                                   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Coins         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	CoinAuthority string                                   `protobuf:"bytes,3,opt,name=coin_authority,json=coinAuthority,proto3" json:"coin_authority,omitempty"`
}

func (m *MsgRegisterNewCoins) Reset()         { *m = MsgRegisterNewCoins{} }
func (m *MsgRegisterNewCoins) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNewCoins) ProtoMessage()    {}
func (*MsgRegisterNewCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{4}
}
func (m *MsgRegisterNewCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNewCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNewCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNewCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNewCoins.Merge(m, src)
}
func (m *MsgRegisterNewCoins) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNewCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNewCoins.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNewCoins proto.InternalMessageInfo

func (m *MsgRegisterNewCoins) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterNewCoins) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgRegisterNewCoins) GetCoinAuthority() string {
	if m != nil {
		return m.CoinAuthority
	}
	return ""
}

type MsgRegisterNewCoinsResponse struct {
}

func (m *MsgRegisterNewCoinsResponse) Reset()         { *m = MsgRegisterNewCoinsResponse{} }
func (m *MsgRegisterNewCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNewCoinsResponse) ProtoMessage()    {}
func (*MsgRegisterNewCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{5}
}
func (m *MsgRegisterNewCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNewCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNewCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNewCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNewCoinsResponse.Merge(m, src)
}
func (m *MsgRegisterNewCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNewCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNewCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNewCoinsResponse proto.InternalMessageInfo

type MsgDeregisterCoins struct {
	Authority string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denoms    []string `protobuf:"bytes,2,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *MsgDeregisterCoins) Reset()         { *m = MsgDeregisterCoins{} }
func (m *MsgDeregisterCoins) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterCoins) ProtoMessage()    {}
func (*MsgDeregisterCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{6}
}
func (m *MsgDeregisterCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterCoins.Merge(m, src)
}
func (m *MsgDeregisterCoins) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterCoins.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterCoins proto.InternalMessageInfo

func (m *MsgDeregisterCoins) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDeregisterCoins) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type MsgDeregisterCoinsResponse struct {
}

func (m *MsgDeregisterCoinsResponse) Reset()         { *m = MsgDeregisterCoinsResponse{} }
func (m *MsgDeregisterCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterCoinsResponse) ProtoMessage()    {}
func (*MsgDeregisterCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{7}
}
func (m *MsgDeregisterCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterCoinsResponse.Merge(m, src)
}
func (m *MsgDeregisterCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterCoinsResponse proto.InternalMessageInfo

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/bridge parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{8}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{9}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgUpdateEpochDuration struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string        `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Duration  time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration,omitempty"`
}

func (m *MsgUpdateEpochDuration) Reset()         { *m = MsgUpdateEpochDuration{} }
func (m *MsgUpdateEpochDuration) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEpochDuration) ProtoMessage()    {}
func (*MsgUpdateEpochDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{10}
}
func (m *MsgUpdateEpochDuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEpochDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEpochDuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEpochDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEpochDuration.Merge(m, src)
}
func (m *MsgUpdateEpochDuration) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEpochDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEpochDuration.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEpochDuration proto.InternalMessageInfo

func (m *MsgUpdateEpochDuration) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateEpochDuration) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type MsgUpdateEpochDurationResponse struct {
}

func (m *MsgUpdateEpochDurationResponse) Reset()         { *m = MsgUpdateEpochDurationResponse{} }
func (m *MsgUpdateEpochDurationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEpochDurationResponse) ProtoMessage()    {}
func (*MsgUpdateEpochDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c403f05ee185653d, []int{11}
}
func (m *MsgUpdateEpochDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEpochDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEpochDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEpochDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEpochDurationResponse.Merge(m, src)
}
func (m *MsgUpdateEpochDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEpochDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEpochDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEpochDurationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBridgeIn)(nil), "realionetwork.bridge.v1.MsgBridgeIn")
	proto.RegisterType((*MsgBridgeInResponse)(nil), "realionetwork.bridge.v1.MsgBridgeInResponse")
	proto.RegisterType((*MsgBridgeOut)(nil), "realionetwork.bridge.v1.MsgBridgeOut")
	proto.RegisterType((*MsgBridgeOutResponse)(nil), "realionetwork.bridge.v1.MsgBridgeOutResponse")
	proto.RegisterType((*MsgRegisterNewCoins)(nil), "realionetwork.bridge.v1.MsgRegisterNewCoins")
	proto.RegisterType((*MsgRegisterNewCoinsResponse)(nil), "realionetwork.bridge.v1.MsgRegisterNewCoinsResponse")
	proto.RegisterType((*MsgDeregisterCoins)(nil), "realionetwork.bridge.v1.MsgDeregisterCoins")
	proto.RegisterType((*MsgDeregisterCoinsResponse)(nil), "realionetwork.bridge.v1.MsgDeregisterCoinsResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "realionetwork.bridge.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "realionetwork.bridge.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpdateEpochDuration)(nil), "realionetwork.bridge.v1.MsgUpdateEpochDuration")
	proto.RegisterType((*MsgUpdateEpochDurationResponse)(nil), "realionetwork.bridge.v1.MsgUpdateEpochDurationResponse")
}

func init() { proto.RegisterFile("realionetwork/bridge/v1/tx.proto", fileDescriptor_c403f05ee185653d) }

var fileDescriptor_c403f05ee185653d = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xbf, 0x4f, 0xdb, 0x40,
	0x14, 0xc7, 0x63, 0x7e, 0x44, 0xe4, 0x41, 0xa1, 0x32, 0x34, 0x04, 0x97, 0x3a, 0x51, 0x04, 0x6a,
	0x44, 0xc1, 0xe6, 0x47, 0xa5, 0x4a, 0x48, 0x1d, 0x9a, 0xd2, 0xa1, 0x43, 0x4a, 0x65, 0x89, 0x85,
	0x81, 0xca, 0x49, 0xae, 0x17, 0x17, 0xec, 0xb3, 0x7c, 0x97, 0x00, 0x4b, 0x5b, 0xf5, 0x2f, 0xa8,
	0xd4, 0xa5, 0x4b, 0xff, 0x80, 0x76, 0x62, 0xeb, 0xd4, 0x9d, 0x91, 0xb1, 0x13, 0x54, 0x30, 0x20,
	0xf5, 0xaf, 0xa8, 0xec, 0x3b, 0x5f, 0x42, 0x02, 0x49, 0x18, 0x3a, 0xc5, 0xe7, 0xfb, 0xbe, 0xf7,
	0xfd, 0xbc, 0xdc, 0xbd, 0x67, 0xc8, 0x05, 0xc8, 0xde, 0x73, 0x88, 0x87, 0xd8, 0x3e, 0x09, 0x76,
	0xcd, 0x72, 0xe0, 0x54, 0x31, 0x32, 0x1b, 0x2b, 0x26, 0x3b, 0x30, 0xfc, 0x80, 0x30, 0xa2, 0x4e,
	0x5f, 0x51, 0x18, 0x5c, 0x61, 0x34, 0x56, 0xb4, 0x29, 0x4c, 0x30, 0x89, 0x34, 0x66, 0xf8, 0xc4,
	0xe5, 0x9a, 0x8e, 0x09, 0xc1, 0x7b, 0xc8, 0x8c, 0x56, 0xe5, 0xfa, 0x5b, 0xb3, 0x5a, 0x0f, 0x6c,
	0xe6, 0x10, 0x2f, 0xde, 0xaf, 0x10, 0xea, 0x12, 0x6a, 0x96, 0x6d, 0x1a, 0xfa, 0x94, 0x11, 0xb3,
	0x57, 0xcc, 0x0a, 0x71, 0xe2, 0xfd, 0x69, 0xb1, 0xef, 0x52, 0x1c, 0x62, 0xb8, 0x14, 0x8b, 0x8d,
	0xb9, 0x9b, 0x48, 0x7d, 0x3b, 0xb0, 0x5d, 0xca, 0x55, 0xf9, 0x9f, 0x0a, 0x8c, 0x96, 0x28, 0x2e,
	0x46, 0xbb, 0x2f, 0x3d, 0x75, 0x16, 0x52, 0x76, 0x9d, 0xd5, 0x48, 0xe0, 0xb0, 0xc3, 0x8c, 0x92,
	0x53, 0x0a, 0x29, 0xab, 0xf9, 0x42, 0xdd, 0x81, 0xa1, 0xd0, 0x3a, 0x33, 0x90, 0x53, 0x0a, 0xa3,
	0xab, 0x33, 0x06, 0xf7, 0x36, 0x42, 0x36, 0x43, 0xb0, 0x19, 0xcf, 0x89, 0xe3, 0x15, 0xcd, 0xe3,
	0xd3, 0x6c, 0xe2, 0xc7, 0x59, 0xf6, 0x21, 0x76, 0x58, 0xad, 0x5e, 0x36, 0x2a, 0xc4, 0x35, 0x05,
	0x28, 0xff, 0x59, 0xa2, 0xd5, 0x5d, 0x93, 0x1d, 0xfa, 0x88, 0x46, 0x01, 0x56, 0x94, 0x57, 0xd5,
	0x60, 0x24, 0x40, 0x15, 0x07, 0x35, 0x50, 0x90, 0x19, 0x8c, 0xcc, 0xe5, 0x7a, 0x7d, 0xfc, 0xd3,
	0xe5, 0xd1, 0x42, 0x93, 0x25, 0x7f, 0x0f, 0x26, 0x5b, 0xc0, 0x2d, 0x44, 0x7d, 0xe2, 0x51, 0x94,
	0xff, 0xa2, 0xc0, 0x98, 0x7c, 0xbf, 0x59, 0x67, 0x6a, 0x1a, 0x92, 0xd4, 0xc1, 0x1e, 0x0a, 0x44,
	0x39, 0x62, 0xf5, 0xbf, 0x6b, 0x59, 0x1f, 0x0d, 0x79, 0x85, 0x59, 0x3e, 0x0d, 0x53, 0xad, 0x50,
	0x92, 0xf6, 0x97, 0x12, 0x55, 0x61, 0x21, 0xec, 0x50, 0x86, 0x82, 0x57, 0x68, 0x3f, 0xcc, 0x40,
	0x7b, 0x1c, 0x83, 0x0d, 0xc3, 0xa1, 0x05, 0xcd, 0x0c, 0xe4, 0x06, 0xbb, 0xb3, 0x2f, 0x0b, 0xf6,
	0x42, 0x9f, 0xec, 0xd4, 0xe2, 0x99, 0xd5, 0x79, 0x18, 0x0f, 0x1f, 0xde, 0x34, 0x29, 0xf8, 0x79,
	0xdc, 0x09, 0xdf, 0x3e, 0x93, 0x87, 0xf0, 0x00, 0xee, 0x5f, 0x83, 0x2f, 0xcb, 0xdb, 0x06, 0xb5,
	0x44, 0xf1, 0x06, 0x0a, 0x84, 0xa0, 0x9f, 0xe2, 0xd2, 0x90, 0xac, 0x22, 0x8f, 0xb8, 0xbc, 0xba,
	0x94, 0x25, 0x56, 0x1d, 0xe7, 0x3f, 0x0b, 0x5a, 0x67, 0x6e, 0xe9, 0xfc, 0x1e, 0x26, 0x4a, 0x14,
	0x6f, 0xf9, 0x55, 0x9b, 0xa1, 0xd7, 0xd1, 0x85, 0xef, 0x61, 0xfb, 0x14, 0x92, 0xbc, 0x31, 0xc4,
	0x85, 0xc8, 0x1a, 0x37, 0xf4, 0xb1, 0xc1, 0xd3, 0x15, 0x87, 0xc2, 0xbf, 0xd6, 0x12, 0x41, 0x1d,
	0x74, 0x33, 0x30, 0xdd, 0xe6, 0x2f, 0xd1, 0xbe, 0x29, 0x90, 0x96, 0x7b, 0x2f, 0x7c, 0x52, 0xa9,
	0x6d, 0x88, 0x96, 0xef, 0x81, 0xb8, 0x05, 0x23, 0xf1, 0x70, 0x90, 0xb7, 0x96, 0x4f, 0x0f, 0x23,
	0x9e, 0x1e, 0x46, 0x9c, 0xaa, 0xa8, 0x87, 0x78, 0x7f, 0x4f, 0xb3, 0x6a, 0x1c, 0xb2, 0x48, 0x5c,
	0x87, 0x21, 0xd7, 0x67, 0x87, 0x5f, 0xcf, 0xb2, 0x8a, 0x25, 0x53, 0x75, 0xa0, 0xe7, 0x40, 0xbf,
	0x1e, 0x2f, 0xae, 0x60, 0xf5, 0xfb, 0x30, 0x0c, 0x96, 0x28, 0x56, 0x77, 0x60, 0x44, 0x0e, 0x8e,
	0xb9, 0x1b, 0xff, 0xaf, 0x96, 0x2e, 0xd5, 0x16, 0xfb, 0x51, 0xc5, 0x3e, 0xaa, 0x0d, 0xa9, 0x66,
	0x1f, 0xcf, 0xf7, 0x0e, 0xdd, 0xac, 0x33, 0x6d, 0xa9, 0x2f, 0x99, 0xb4, 0x68, 0xc0, 0xdd, 0x8e,
	0xe6, 0xeb, 0x0a, 0xd9, 0xae, 0xd6, 0x1e, 0xdf, 0x46, 0x2d, 0x7d, 0x29, 0x4c, 0xb4, 0xb7, 0xc5,
	0xa3, 0x6e, 0x89, 0xda, 0xc4, 0xda, 0xda, 0x2d, 0xc4, 0xd2, 0xf4, 0x1d, 0x8c, 0x5d, 0xe9, 0x88,
	0x42, 0xb7, 0x24, 0xad, 0x4a, 0x6d, 0xb9, 0x5f, 0xa5, 0xf4, 0xfa, 0x00, 0x93, 0xd7, 0xdd, 0x70,
	0xb3, 0x77, 0xa2, 0x2b, 0x01, 0xda, 0x93, 0x5b, 0x06, 0xc4, 0x00, 0xda, 0xf0, 0xc7, 0xcb, 0xa3,
	0x05, 0xa5, 0x58, 0x3a, 0x3e, 0xd7, 0x95, 0x93, 0x73, 0x5d, 0xf9, 0x73, 0xae, 0x2b, 0x9f, 0x2f,
	0xf4, 0xc4, 0xc9, 0x85, 0x9e, 0xf8, 0x7d, 0xa1, 0x27, 0xb6, 0xd7, 0x5a, 0x66, 0x22, 0xf7, 0x60,
	0xa8, 0x52, 0x13, 0x8f, 0x4b, 0xf1, 0x77, 0xf3, 0x20, 0xfe, 0x72, 0x46, 0x43, 0xb2, 0x9c, 0x8c,
	0x3a, 0x6d, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x6d, 0xbe, 0x1f, 0x08, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	BridgeIn(ctx context.Context, in *MsgBridgeIn, opts ...grpc.CallOption) (*MsgBridgeInResponse, error)
	BridgeOut(ctx context.Context, in *MsgBridgeOut, opts ...grpc.CallOption) (*MsgBridgeOutResponse, error)
	RegisterNewCoins(ctx context.Context, in *MsgRegisterNewCoins, opts ...grpc.CallOption) (*MsgRegisterNewCoinsResponse, error)
	DeregisterCoins(ctx context.Context, in *MsgDeregisterCoins, opts ...grpc.CallOption) (*MsgDeregisterCoinsResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateEpochDuration(ctx context.Context, in *MsgUpdateEpochDuration, opts ...grpc.CallOption) (*MsgUpdateEpochDurationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BridgeIn(ctx context.Context, in *MsgBridgeIn, opts ...grpc.CallOption) (*MsgBridgeInResponse, error) {
	out := new(MsgBridgeInResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/BridgeIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BridgeOut(ctx context.Context, in *MsgBridgeOut, opts ...grpc.CallOption) (*MsgBridgeOutResponse, error) {
	out := new(MsgBridgeOutResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/BridgeOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterNewCoins(ctx context.Context, in *MsgRegisterNewCoins, opts ...grpc.CallOption) (*MsgRegisterNewCoinsResponse, error) {
	out := new(MsgRegisterNewCoinsResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/RegisterNewCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeregisterCoins(ctx context.Context, in *MsgDeregisterCoins, opts ...grpc.CallOption) (*MsgDeregisterCoinsResponse, error) {
	out := new(MsgDeregisterCoinsResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/DeregisterCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEpochDuration(ctx context.Context, in *MsgUpdateEpochDuration, opts ...grpc.CallOption) (*MsgUpdateEpochDurationResponse, error) {
	out := new(MsgUpdateEpochDurationResponse)
	err := c.cc.Invoke(ctx, "/realionetwork.bridge.v1.Msg/UpdateEpochDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	BridgeIn(context.Context, *MsgBridgeIn) (*MsgBridgeInResponse, error)
	BridgeOut(context.Context, *MsgBridgeOut) (*MsgBridgeOutResponse, error)
	RegisterNewCoins(context.Context, *MsgRegisterNewCoins) (*MsgRegisterNewCoinsResponse, error)
	DeregisterCoins(context.Context, *MsgDeregisterCoins) (*MsgDeregisterCoinsResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	UpdateEpochDuration(context.Context, *MsgUpdateEpochDuration) (*MsgUpdateEpochDurationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BridgeIn(ctx context.Context, req *MsgBridgeIn) (*MsgBridgeInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeIn not implemented")
}
func (*UnimplementedMsgServer) BridgeOut(ctx context.Context, req *MsgBridgeOut) (*MsgBridgeOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeOut not implemented")
}
func (*UnimplementedMsgServer) RegisterNewCoins(ctx context.Context, req *MsgRegisterNewCoins) (*MsgRegisterNewCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewCoins not implemented")
}
func (*UnimplementedMsgServer) DeregisterCoins(ctx context.Context, req *MsgDeregisterCoins) (*MsgDeregisterCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterCoins not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpdateEpochDuration(ctx context.Context, req *MsgUpdateEpochDuration) (*MsgUpdateEpochDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpochDuration not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BridgeIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/BridgeIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeIn(ctx, req.(*MsgBridgeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BridgeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/BridgeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeOut(ctx, req.(*MsgBridgeOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterNewCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterNewCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterNewCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/RegisterNewCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterNewCoins(ctx, req.(*MsgRegisterNewCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeregisterCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeregisterCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeregisterCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/DeregisterCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeregisterCoins(ctx, req.(*MsgDeregisterCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEpochDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEpochDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEpochDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realionetwork.bridge.v1.Msg/UpdateEpochDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEpochDuration(ctx, req.(*MsgUpdateEpochDuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "realionetwork.bridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BridgeIn",
			Handler:    _Msg_BridgeIn_Handler,
		},
		{
			MethodName: "BridgeOut",
			Handler:    _Msg_BridgeOut_Handler,
		},
		{
			MethodName: "RegisterNewCoins",
			Handler:    _Msg_RegisterNewCoins_Handler,
		},
		{
			MethodName: "DeregisterCoins",
			Handler:    _Msg_DeregisterCoins_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateEpochDuration",
			Handler:    _Msg_UpdateEpochDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realionetwork/bridge/v1/tx.proto",
}

func (m *MsgBridgeIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reciever) > 0 {
		i -= len(m.Reciever)
		copy(dAtA[i:], m.Reciever)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reciever)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBridgeOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNewCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNewCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNewCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinAuthority) > 0 {
		i -= len(m.CoinAuthority)
		copy(dAtA[i:], m.CoinAuthority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CoinAuthority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNewCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNewCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNewCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEpochDuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEpochDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEpochDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTx(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEpochDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEpochDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEpochDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBridgeIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Reciever)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBridgeOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBridgeOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterNewCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.CoinAuthority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterNewCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeregisterCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeregisterCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateEpochDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateEpochDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBridgeIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reciever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reciever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNewCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNewCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNewCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNewCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNewCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNewCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEpochDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEpochDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEpochDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEpochDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEpochDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEpochDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
